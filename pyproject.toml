# This Python file uses the following encoding: utf-8
#
# SPDX-FileCopyrightText: 2022 Raphaël Doursenaud <rdoursenaud@free.fr>
#
# SPDX-License-Identifier: GPL-3.0-or-later

# https://packaging.python.org

[build-system]
requires = ['hatchling']
build-backend = 'hatchling.build'

[project]  # https://packaging.python.org/en/latest/specifications/declaring-project-metadata
name = "midiexplorer"  # https://peps.python.org/pep-0503/
description = "Yet another MIDI monitor, analyzer, debugger and manipulation tool."
readme = 'README.md'
requires-python = '>=3.10'
# https://peps.python.org/pep-0508
# https://peps.python.org/pep-0440/#version-specifiers
dependencies = [
    'dearpygui~=1.8.0',
    'dearpygui-ext~=0.9.5',
    'midi_const~=0.1.0',
    'mido~=1.3.0', # FIXME: currently using custom 1.2.11a1 with EOX, running status and delta time support
    'python-rtmidi~=1.5.5', # While it's mido's default backend, we explicitly require it for some features.
    'Pillow~=9.5.0',
]
license = { file = 'LICENSE' }
authors = [
    { name = "Raphaël Doursenaud", email = 'rdoursenaud@free.fr' }
]
keywords = [
    "MIDI",
    "Analyzer",
    "Debugger",
]
classifiers = [
    'Development Status :: 3 - Alpha',
    'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',
    'Environment :: Win32 (MS Windows)',
    'Environment :: MacOS X',
    'Environment :: X11 Applications',
    # 'Environment :: Plugins',  # TODO: module plugins
    'Intended Audience :: Customer Service',
    'Intended Audience :: Developers',
    'Intended Audience :: Education',
    'Intended Audience :: End Users/Desktop',
    'Intended Audience :: Information Technology',
    'Intended Audience :: Manufacturing',
    'Intended Audience :: Other Audience',
    'Intended Audience :: Science/Research',
    'Intended Audience :: System Administrators',
    'Intended Audience :: Telecommunications Industry',
    'Natural Language :: English',
    # 'Operating System :: Microsoft :: Windows :: Windows 8.1',  # TODO: test
    'Operating System :: Microsoft :: Windows :: Windows 10',
    'Operating System :: Microsoft :: Windows :: Windows 11',
    'Operating System :: MacOS :: MacOS X',
    'Operating System :: POSIX :: Linux',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.10',
    'Topic :: Artistic Software',
    'Topic :: Communications',
    # 'Topic :: Documentation :: Sphinx',  # TODO
    'Topic :: Education :: Testing',
    'Topic :: Home Automation',
    # 'Topic :: Internet',  # TODO: implement RTP-MIDI support
    'Topic :: Multimedia :: Sound/Audio :: Analysis',
    'Topic :: Multimedia :: Sound/Audio :: MIDI',
    #  'Topic :: Multimedia :: Sound/Audio :: Players',  # TODO: implement SMF player
    'Topic :: Scientific/Engineering',
    'Topic :: Scientific/Engineering :: Human Machine Interfaces',
    'Topic :: Scientific/Engineering :: Information Analysis',
    'Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator',
    'Topic :: Scientific/Engineering :: Visualization',
    'Topic :: Software Development :: Debuggers',
    'Topic :: Software Development :: Embedded Systems',
    'Topic :: Software Development :: Quality Assurance',
    'Topic :: Software Development :: Testing',
    'Topic :: System :: Hardware :: Universal Serial Bus (USB) :: Audio',
    # 'Topic :: System :: Benchmark',  # TODO: implement latency trip tester and timegraphs
    # 'Topic :: System :: Emulators',  # TODO: implement sending messages and extended protocol emulators
    # 'Topic :: System :: Hardware :: Hardware Drivers',  # TODO: implement direct communication
    # 'Topic :: System :: Hardware :: Universal Serial Bus (USB) :: Audio',  # TODO: implement direct USB MIDI communication
    # 'Topic :: System :: Hardware :: Universal Serial Bus (USB) :: Diagnostic Device',  # TODO: implement hardware probe support
    # 'Topic :: System :: Logging',  # TODO: log to file
    'Topic :: System :: Monitoring',
    'Topic :: Utilities',
    'Typing :: Typed',
]  # https://pypi.org/classifiers/
dynamic = [
    'version',
]

[project.urls]
Homepage = 'https://github.com/ematech/midiexplorer'
Issues = 'https://github.com/ematech/midiexplorer/issues'

[project.gui-scripts]
midiexplorer = 'midiexplorer.__main__:main'

[tool.hatch.version]
path = 'src/midiexplorer/__about__.py'

[tool.hatch.envs.default]
dependencies = [
    'pylint',
    'darglint2',
    'pytest',
    'pytest-cov',
]
[tool.hatch.envs.default.scripts]
srclint = 'pylint src/'
doclint = 'darglint2 -s sphinx src/'
lint = 'pylint && doclint'
cov = 'pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=hatch_demo --cov=tests'
no-cov = 'cov --no-cov'

[[tool.hatch.envs.test.matrix]]
python = [
    '310',
    '311',
]

[tool.hatch.envs.docs]
dependencies = [
    'sphinx',
]

[tool.coverage.run]
branch = true
parallel = true
omit = [
    'src/midiexplorer/__about__.py',
]

[tool.coverage.report]
exclude_lines = [
    'no cov',
    'if __name__ == .__main__.:',
    'if TYPE_CHECKING:',
]

[tool.hatch.build.targets.sdist]
exclude = [
    '/.cache',
    '/.pytest_cache',
    '/.run',
    '/.gitignore',
    '/data',
    '/dist',
    '/docs',
    '/midiexplorer.build',
    '/.coverage',
    '/.gitignore',
    '/.midiexplorer.cmd',
    '/.midiexplorer.exe',
    '/RELEASE.md',
    '/STYLE.md',
    '/TODO.md',
]

[tool.hatch.build.targets.wheel]
packages = [
    'src/midiexplorer',
]
